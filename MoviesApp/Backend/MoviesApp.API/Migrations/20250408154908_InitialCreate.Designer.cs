// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesApp.API.Data;

#nullable disable

namespace MoviesApp.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250408154908_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoviesApp.API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AmazonPrime")
                        .HasColumnType("int");

                    b.Property<int?>("AppleTVPlus")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisneyPlus")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Hulu")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Netflix")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ParamountPlus")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Peacock")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MoviesApp.API.Models.Movie", b =>
                {
                    b.Property<string>("ShowId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("show_id");

                    b.Property<int?>("Action")
                        .HasColumnType("int")
                        .HasColumnName("Action");

                    b.Property<int?>("Adventure")
                        .HasColumnType("int")
                        .HasColumnName("Adventure");

                    b.Property<int?>("AnimeSeriesInternationalTVShows")
                        .HasColumnType("int")
                        .HasColumnName("AnimeSeriesInternationalTVShows");

                    b.Property<int?>("BritishTVShowsDocuseriesInternationalTVShows")
                        .HasColumnType("int")
                        .HasColumnName("BritishTVShowsDocuseriesInternationalTVShows");

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cast");

                    b.Property<int?>("Children")
                        .HasColumnType("int")
                        .HasColumnName("Children");

                    b.Property<int?>("Comedies")
                        .HasColumnType("int")
                        .HasColumnName("Comedies");

                    b.Property<int?>("ComediesDramasInternationalMovies")
                        .HasColumnType("int")
                        .HasColumnName("ComediesDramasInternationalMovies");

                    b.Property<int?>("ComediesInternationalMovies")
                        .HasColumnType("int")
                        .HasColumnName("ComediesInternationalMovies");

                    b.Property<int?>("ComediesRomanticMovies")
                        .HasColumnType("int")
                        .HasColumnName("ComediesRomanticMovies");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<int?>("CrimeTVShowsDocuseries")
                        .HasColumnType("int")
                        .HasColumnName("CrimeTVShowsDocuseries");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("director");

                    b.Property<int?>("Documentaries")
                        .HasColumnType("int")
                        .HasColumnName("Documentaries");

                    b.Property<int?>("DocumentariesInternationalMovies")
                        .HasColumnType("int")
                        .HasColumnName("DocumentariesInternationalMovies");

                    b.Property<int?>("Docuseries")
                        .HasColumnType("int")
                        .HasColumnName("Docuseries");

                    b.Property<int?>("Dramas")
                        .HasColumnType("int")
                        .HasColumnName("Dramas");

                    b.Property<int?>("DramasInternationalMovies")
                        .HasColumnType("int")
                        .HasColumnName("DramasInternationalMovies");

                    b.Property<int?>("DramasRomanticMovies")
                        .HasColumnType("int")
                        .HasColumnName("DramasRomanticMovies");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("duration");

                    b.Property<int?>("FamilyMovies")
                        .HasColumnType("int")
                        .HasColumnName("FamilyMovies");

                    b.Property<int?>("Fantasy")
                        .HasColumnType("int")
                        .HasColumnName("Fantasy");

                    b.Property<int?>("HorrorMovies")
                        .HasColumnType("int")
                        .HasColumnName("HorrorMovies");

                    b.Property<int?>("InternationalMoviesThrillers")
                        .HasColumnType("int")
                        .HasColumnName("InternationalMoviesThrillers");

                    b.Property<int?>("InternationalTVShowsRomanticTVShowsTVDramas")
                        .HasColumnType("int")
                        .HasColumnName("InternationalTVShowsRomanticTVShowsTVDramas");

                    b.Property<int?>("KidsTV")
                        .HasColumnType("int")
                        .HasColumnName("KidsTV");

                    b.Property<int?>("LanguageTVShows")
                        .HasColumnType("int")
                        .HasColumnName("LanguageTVShows");

                    b.Property<int?>("Musicals")
                        .HasColumnType("int")
                        .HasColumnName("Musicals");

                    b.Property<int?>("NatureTV")
                        .HasColumnType("int")
                        .HasColumnName("NatureTV");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("poster_url");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rating");

                    b.Property<int?>("RealityTV")
                        .HasColumnType("int")
                        .HasColumnName("RealityTV");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int")
                        .HasColumnName("release_year");

                    b.Property<int?>("Spirituality")
                        .HasColumnType("int")
                        .HasColumnName("Spirituality");

                    b.Property<int?>("TVAction")
                        .HasColumnType("int")
                        .HasColumnName("TVAction");

                    b.Property<int?>("TVComedies")
                        .HasColumnType("int")
                        .HasColumnName("TVComedies");

                    b.Property<int?>("TVDramas")
                        .HasColumnType("int")
                        .HasColumnName("TVDramas");

                    b.Property<int?>("TalkShowsTVComedies")
                        .HasColumnType("int")
                        .HasColumnName("TalkShowsTVComedies");

                    b.Property<int?>("Thrillers")
                        .HasColumnType("int")
                        .HasColumnName("Thrillers");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("ShowId");

                    b.ToTable("movies_titles", (string)null);
                });

            modelBuilder.Entity("MoviesApp.API.Models.Rating", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("ShowId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("show_id");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.HasKey("UserId", "ShowId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ShowId");

                    b.ToTable("movies_ratings", (string)null);
                });

            modelBuilder.Entity("MoviesApp.API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<int?>("AmazonPrime")
                        .HasColumnType("int")
                        .HasColumnName("AmazonPrime");

                    b.Property<int?>("AppleTVPlus")
                        .HasColumnType("int")
                        .HasColumnName("AppleTVPlus");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<int?>("DisneyPlus")
                        .HasColumnType("int")
                        .HasColumnName("DisneyPlus");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gender");

                    b.Property<int?>("Hulu")
                        .HasColumnType("int")
                        .HasColumnName("Hulu");

                    b.Property<int?>("Max")
                        .HasColumnType("int")
                        .HasColumnName("Max");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("Netflix")
                        .HasColumnType("int")
                        .HasColumnName("Netflix");

                    b.Property<int?>("ParamountPlus")
                        .HasColumnType("int")
                        .HasColumnName("ParamountPlus");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<int?>("Peacock")
                        .HasColumnType("int")
                        .HasColumnName("Peacock");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("state");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("zip");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("movies_users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoviesApp.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoviesApp.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesApp.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoviesApp.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviesApp.API.Models.Rating", b =>
                {
                    b.HasOne("MoviesApp.API.Models.ApplicationUser", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MoviesApp.API.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesApp.API.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesApp.API.Models.ApplicationUser", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MoviesApp.API.Models.Movie", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MoviesApp.API.Models.User", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
